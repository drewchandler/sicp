(define (let? exp) (tagged-list? exp 'let))
(define (named-let? exp) (symbol (cadr exp)))
(define (let-assignments exp)
  (if (named-let? exp)
    (caddr exp)
    (cadr exp)))
(define (let-variables exp) (map car (let-assignments exp)))
(define (let-expressions exp) (map cadr (let-assignments exp)))
(define (let-body exp)
  (if (named-let? exp)
    (cadddr exp)
    (caddr exp)))
(define (let-name exp) (cadr exp))

(define (let->combination exp)
  (let ((combination (make-lamda (let-variables exp) (let-body exp))))
    (if (named-let? exp)
      (sequence->exp (list 'define (cons (let-name exp) (let-variables)) (let-body exp))
                     (cons (let-name exp) (let-expressions)))
      (list (make-lamda (let-variables exp) (let-body exp)) (let-expressions exp)))))
