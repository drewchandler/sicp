(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

(define (definition? exp) (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp) (cddr exp))))

(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (if (eq? (car vals) '*unassigned*)
               (error "Accessing unassigned variable!" var)
               (car vals)))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (scan-out-defines exp)
  (define (split-definitions-and-body lambda-body)
    (define (split-recur parts defs exps)
      (cond
        ((null? parts) (cons defs exps))
        ((definition? (car parts))
         (split-recur (cdr parts) (append defs (list (car parts))) exps))
        (else
          (split-recur (cdr parts) defs (append exps (list (car parts)))))))
    (split-recur lambda-body '() '()))

  (let* ((split (split-definitions-and-body (lambda-body exp)))
         (definition-names (map definition-variable (car split)))
         (definition-values (map definition-value (car split)))
         (body (cdr split)))
    (list 'lambda
          (lambda-parameters exp)
          (append (list 'let (map (lambda (d) (list d (list 'quote '*unassigned*))) definition-names))
                  (append (map (lambda (d v) (list 'set! d v)) definition-names definition-values)
                          body)))))

(newline)
(display (scan-out-defines '(lambda (a b) (define c 5) (+ a b c))))

(newline)
(display "NEXT")
(newline)
(display (scan-out-defines '(lambda (a b) (define (c d) (+ d 5)) (c 4))))
