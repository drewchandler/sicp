(load "get-put.scm")
(load "tagging.scm")
(load "number-packages.scm")
(load "polynomial-package.scm")

(describe "polynomial addition"
  (it "handles polynomial with same variable" (lambda ()
    (assert (equal? (add (make-poly 'x (list (list 1 (make-scheme-number 1))))
                         (make-poly 'x (list (list 1 (make-scheme-number 2)))))
                    (make-poly 'x (list (list 1 (make-scheme-number 3))))))
  ))
  (it "handles polynomial with a lower variable - no zero order coeff" (lambda ()
    (assert (equal? (add (make-poly 'y (list (list 1 (make-scheme-number 1))))
                         (make-poly 'x (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'y  (list (list 1 (make-scheme-number 1))
                                         (list 0 (make-poly 'x (list (list 1 (make-scheme-number 1)))))))))
  ))
  (it "handles polynomial with a lower variable - zero order coeff" (lambda ()
    (assert (equal? (add (make-poly 'y (list (list 1 (make-scheme-number 1)) (list 0 (make-scheme-number 5))))
                         (make-poly 'x (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'y  (list (list 1 (make-scheme-number 1))
                                         (list 0 (make-poly 'x (list (list 1 (make-scheme-number 1))
                                                                     (list 0 (make-scheme-number 5)))))))))
  ))
  (it "handles polynomial with a higher variable" (lambda ()
    (assert (equal? (add (make-poly 'x (list (list 1 (make-scheme-number 1))))
                         (make-poly 'y (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'y (list (list 1 (make-scheme-number 1))
                                        (list 0 (make-poly 'x (list (list 1 (make-scheme-number 1)))))))))
  ))
)

(describe "polynomial multiplication"
  (it "handles polynomials with the same variable" (lambda ()
    (assert (equal? (mul (make-poly 'x (list (list 1 (make-scheme-number 1))))
                         (make-poly 'x (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'x (list (list 2 (make-scheme-number 1))))))
  ))
  (it "handles polynomials with a lower variable" (lambda ()
    (assert (equal? (mul (make-poly 'y (list (list 1 (make-scheme-number 1))))
                         (make-poly 'x (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'y (list (list 1 (make-poly 'x (list (list 1 (make-scheme-number 1)))))))))
  ))
  (it "handles polynomials with a lower variable" (lambda ()
    (assert (equal? (mul (make-poly 'x (list (list 1 (make-scheme-number 1))))
                         (make-poly 'y (list (list 1 (make-scheme-number 1)))))
                    (make-poly 'y (list (list 1 (make-poly 'x (list (list 1 (make-scheme-number 1)))))))))
  ))
)
