(load "2.90.scm")

(describe "negate"
  (it "works with scheme-number" (lambda ()
    (assert (equal? (make-scheme-number -5)
                    (negate (make-scheme-number 5))))
  ))
  (it "works with rational" (lambda ()
    (assert (equal? (make-rational -1 3)
                    (negate (make-rational 1 3))))
  ))
  (it "works with complex" (lambda ()
    (assert (equal? (make-complex-from-real-imag -1 -1)
                    (negate (make-complex-from-real-imag 1 1))))
  ))
  (it "works with polynomial" (lambda ()
    (assert (equal? (make-poly 'x (cons 'sparse-term-list (list (list 1 (make-scheme-number -1)))))
                    (negate (make-poly 'x (cons 'sparse-term-list (list (list 1 (make-scheme-number 1))))))))
  ))
)

;(describe "subtracting polynomials"
;  (it "different orders" (lambda ()
;    (assert (equal? (make-poly 'x (list (list 2 (make-scheme-number 1))
;                                        (list 1 (make-scheme-number -1))))
;                    (sub (make-poly 'x (list (list 2 (make-scheme-number 1))))
;                         (make-poly 'x (list (list 1 (make-scheme-number 1)))))))
;  ))
;  (it "same orders" (lambda ()
;    (assert (equal? (make-poly 'x (list (list 2 (make-scheme-number 2))))
;                    (sub (make-poly 'x (list (list 2 (make-scheme-number 3))))
;                         (make-poly 'x (list (list 2 (make-scheme-number 1)))))))
;  ))
;)
